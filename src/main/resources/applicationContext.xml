<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

<!--    <context:component-scan  base-package="dao,service" />-->
    <context:component-scan  base-package="dao" />

    <!--This is the bean definition that defines where the program would be retrieving its data.
        This makes Spring projects versatile. Many times a project could be started without knowing
        exactly how the data should be managed. If you decide to not do a local SQLite database as
        your data source later, you just need to change the dataSource bean with the relevant
        dependencies and properties configured and add another DAO class implementation for it.

        The concept of layering is seen in this project. The Dao classes only manages retrieval or
        sending of information to the dataSource. The service class accesses the Dao classes to do
        the service it needs to accomplish. So if you changed the dataSource, there is no need of
        changing the service classes at all. This is the benefit of the Single Responsibility
        principle. You will see in part 2 of the Spring Lab how this allows migrating to Hibernate.

        Notice how this bean definition uses setter injection. The fields driverClassName
        and url are injected with String values allowing the bean to know what JDBC driver to use and
        where the database is located. Additional fields like a login required to access the DB can be
        initialized here.-->
<!--    <bean id="dataSource"-->
<!--          class = "org.springframework.jdbc.datasource.DriverManagerDataSource">-->
<!--        <property name = "driverClassName" value = "org.sqlite.JDBC"/>-->
<!--        <property name = "url" value = "jdbc:sqlite:data.sqlite"/>-->
<!--    </bean>-->
    <bean id="dataSource"
          class = "org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name = "driverClassName" value = "com.mysql.cj.jdbc.Driver"/>
        <property name = "url" value = "jdbc:mysql://localhost:3306/studentdb"/>
        <property name="username" value="root"/>
        <property name="password" value="rKiQ4&#36;&#38;N&#35;&#33;MR&#94;qN"/>
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="annotatedClasses">
            <list>
                <value>model.Student</value>
            </list>
        </property>
    </bean>

    <bean id="transactionManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <tx:annotation-driven/>

    <!--This bean definition instantiates a JdbcTemplate class bean. Notice that it setter
        injects the dataSource bean. Think of this as saving what is needed to access the dataSource
        into JdbcTemplate so it can always access the database and know how to open the connection.-->
<!--    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">-->
<!--        <property name="dataSource" ref="dataSource"/>-->
<!--    </bean>-->
    <!-- Using autowire! -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" autowire="byName"/>

    <!--As you follow through the tutorial, add additional bean definitions below-->
<!--    <bean id="studentDAO" class ="dao.StudentDAOImpl">-->
<!--        <constructor-arg ref="jdbcTemplate" />-->
<!--    </bean>-->
    <!-- Using autowire! -->
<!--    <bean id="studentDAO" class="dao.StudentDAOImpl" autowire="constructor" />-->

<!--    <bean id="classDAO" class="dao.ClassDAOImpl">-->
<!--        <constructor-arg ref="jdbcTemplate" />-->
<!--    </bean>-->
    <!--- Using autowire! -->
<!--    <bean id="classDAO" class="dao.ClassDAOImpl" autowire="constructor" />-->

    <util:list id="classes">
        <ref bean="CS120"/>
        <ref bean="CS205"/>
    </util:list>

    <bean id="CS120" class = "model.Class">
        <!--use constructor injection here-->
        <!-- classID -->
        <constructor-arg value="120120120" />
        <!-- className -->
        <constructor-arg value="CS120" />
        <!-- room -->
        <constructor-arg value="1170 TMCB" />
        <!-- professor -->
        <constructor-arg value="Brother Wilkerson" />
    </bean>


    <bean id="CS205" class = "model.Class">
        <!--use setter injection here-->
        <property name="classID" value="205205205" />
        <property name="className" value="CS205" />
        <property name="room" value="The MARB" />
        <property name="professor" value="Brother Rodham" />
    </bean>

<!--    <bean id="reportService" class="service.report.ScheduleReportService" autowire="constructor">-->
<!--        <property name="classes">-->
<!--            <list>-->
<!--                <ref bean="CS120"/>-->
<!--                <ref bean="CS205"/>-->
<!--            </list>-->
<!--        </property>-->
<!--    </bean>-->

    <bean id="loggerAspect" class="aspect.LoggerAspect"/>

    <aop:config>
        <aop:aspect ref="loggerAspect">
            <aop:pointcut id="daoMethod" expression="execution(* dao.*.*(..))"/>
<!--            <aop:after-returning method="logReturn" returning="returnValue" pointcut-ref="daoMethod"/>-->
            <aop:around method="logDAO" pointcut-ref="daoMethod" />
        </aop:aspect>
    </aop:config>
</beans>